// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================ Enums ================

enum GenderIdentity {
  GAY
  LESBIAN
  BISEXUAL
  PANSEXUAL
  QUEER
  ASEXUAL
}

enum Sex {
  MALE
  FEMALE
}

enum ModerationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ModerationItemType {
  INITIAL
  PROFILE_DESCRIPTION
  PROFILE_EDIT
  PHOTOS
}

enum LookingFor {
  LONG_DISTANCE   // Отношения на расстоянии
  LOCAL           // Отношения локальные
  SEX             // Секс (с 16 лет)
  COMMUNICATION   // Общение
  EXCHANGE        // Обмен (с 14 лет)
}

// ================ Models ================

model User {
  telegramId   BigInt   @id @db.BigInt
  username     String?  @db.VarChar(64)
  firstName    String?  @db.VarChar(64)
  lastName     String?  @db.VarChar(64)
  languageCode String?  @db.VarChar(8)
  isPremium    Boolean?
  photoUrl     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  profile      Profile?
  photos       Photo[]
  moderations  ModerationItem[]
  chatMemberships ChatMember[]
  messagesSent    Message[]
  likesSent       Like[]
  likesReceived   Like[]        @relation("LikeTarget")
}

model Profile {
  userId  BigInt  @id @db.BigInt
  user    User    @relation(fields: [userId], references: [telegramId], onDelete: Cascade)

  city        String?         @db.VarChar(128)
  displayName String?         @db.VarChar(32)
  birthDate   DateTime?
  gender      GenderIdentity?
  sex         Sex?

  description String?         @db.Text
  consentAcceptedAt DateTime?

  heightCm    Int?
  weightKg    Int?
  wandSizeCm  Int?

  // Одобренные выборы "Что ищу"
  lookingFor  ProfileLookingFor[]

  // Модерация первичной анкеты
  initialModerationStatus ModerationStatus @default(PENDING)
  initialModerationNote   String?          @db.Text

  // Модерация описания/доп. данных
  descriptionModerationStatus ModerationStatus @default(PENDING)
  descriptionModerationNote   String?          @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Photo {
  id        String   @id @default(cuid())
  userId    BigInt   @db.BigInt
  user      User     @relation(fields: [userId], references: [telegramId], onDelete: Cascade)
  url       String
  position  Int      // 0..2, строго уникальна на пользователя
  status    ModerationStatus @default(PENDING)
  note      String?  @db.Text
  createdAt DateTime @default(now())

  @@unique([userId, position])
}

// Одобренные опции "Что ищу" для профиля
model ProfileLookingFor {
  profileId BigInt       @db.BigInt
  profile   Profile      @relation(fields: [profileId], references: [userId], onDelete: Cascade)
  option    LookingFor

  @@id([profileId, option])
}

// Очередь модерации: хранит изменяемые данные (в т.ч. первичную регистрацию, фото и правки)
model ModerationItem {
  id         String            @id @default(cuid())
  userId     BigInt            @db.BigInt
  user       User              @relation(fields: [userId], references: [telegramId], onDelete: Cascade)
  type       ModerationItemType
  status     ModerationStatus  @default(PENDING)
  payload    Json              // произвольный JSON с предлагаемыми изменениями
  createdAt  DateTime          @default(now())
  resolvedAt DateTime?
  reason     String?           @db.Text

  @@index([userId, status, type])
}

// Справочник совместимостей гендеров для алгоритма метчинга
model GenderCompatibility {
  from GenderIdentity
  to   GenderIdentity

  @@id([from, to])
}

// ================= Messaging =================

model Chat {
  id             String        @id @default(cuid())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  lastMessageAt  DateTime?
  isDialog       Boolean       @default(true)

  members        ChatMember[]
  messages       Message[]

  @@index([lastMessageAt])
}

model ChatMember {
  chatId  String
  userId  BigInt  @db.BigInt
  joinedAt DateTime @default(now())

  chat    Chat    @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [telegramId], onDelete: Cascade)

  lastReadMessageId String?

  @@id([chatId, userId])
  @@index([userId])
}

model Message {
  id        String   @id @default(cuid())
  chatId    String
  senderId  BigInt   @db.BigInt
  text      String?  @db.Text
  photoUrl  String?
  createdAt DateTime @default(now())
  deletedAt DateTime?

  chat   Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  sender User @relation(fields: [senderId], references: [telegramId], onDelete: Cascade)

  attachments MessageAttachment[]

  @@index([chatId, createdAt])
}

model MessageAttachment {
  id        String   @id @default(cuid())
  messageId String
  kind      String   // e.g. image, video
  url       String
  createdAt DateTime @default(now())

  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@index([messageId])
}

// Likes / matches
model Like {
  userId       BigInt   @db.BigInt
  targetUserId BigInt   @db.BigInt
  isLike       Boolean
  createdAt    DateTime @default(now())
  matchedAt    DateTime?

  user   User @relation(fields: [userId], references: [telegramId], onDelete: Cascade)
  target User @relation("LikeTarget", fields: [targetUserId], references: [telegramId], onDelete: Cascade)

  @@id([userId, targetUserId])
  @@index([targetUserId])
}

